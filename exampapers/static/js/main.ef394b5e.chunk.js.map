{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","e","name","target","id","value","toUpperCase","setState","defineProperty","getResults","state","module","length","modules","keys","examPapers","filter","moduleCode","indexOf","results","map","year","paper","push","displayResults","tableEntry","result","react_default","a","createElement","href","reverseYear","reverse","bind","assertThisInitialized","className","type","onChange","placeholder","onClick","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef394b5e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport examPapers from './examPapers.json';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      'module': '',\n      'year': '',\n      'results': [],\n    }\n    this.handleInput = this.handleInput.bind(this)\n    this.getResults = this.getResults.bind(this)\n    this.displayResults = this.displayResults.bind(this)\n    this.reverseYear = this.reverseYear.bind(this)\n  }\n\n  handleInput = (e) => {\n    let name = e.target.id\n    let value = e.target.value.toUpperCase()\n    this.setState({\n      [name]: value\n    }, this.getResults)\n  }\n\n  getResults = () => {\n    if(this.state.module.length > 1){\n      let modules = Object.keys(examPapers).filter((moduleCode) => {\n        return moduleCode.indexOf(this.state.module) === 0 \n        })\n      var results = []\n      modules.map((moduleCode) => {\n        let years = Object.keys(examPapers[moduleCode])\n        years.map((year) => {\n          let paper = [moduleCode.toUpperCase(), year, examPapers[moduleCode][year]]\n          results.push(paper)\n        })\n      })\n      this.setState({\n        results: results\n      })\n    }\n  }\n\n  displayResults = () => {\n    if(this.state.results !== ''){\n    let tableEntry = []\n    this.state.results.map((result) => {\n      if (this.state.year === '' || -1 !== this.state.year.indexOf(result[1]))\n      tableEntry.push(\n        <tr>\n        <td>{result[0]}</td>\n        <td>{result[1]}</td>\n        <td><a href={result[2]} target=\"_blank\">Here</a></td>\n        </tr>\n      )\n    })\n    return tableEntry\n  }\n  }\n\n  reverseYear = () => {\n    let results = this.state.results.reverse()\n    this.setState({\n      results: results\n    })\n  }\n\n  render(){\n  return (\n  <div className=\"Wrapper\">\n    <header>\n    <h1 className=\"Title\">DCU Exam Papers Backup</h1>\n    <h5><a className='linkedin' href='https://www.linkedin.com/in/seanfradl/'>By Sean Fradl</a></h5>\n    <input type=\"text\" onChange={this.handleInput} id=\"module\" className=\"Input-text\" placeholder=\"Module Code\" />\n    <input type=\"text\" onChange={this.handleInput} id=\"year\" className=\"Input-text\" placeholder=\"Year\" />\n    </header>\n    <table>\n    <thead>\n    <tr>\n      <td>Module Code</td>\n      <td>Year <button onClick={this.reverseYear}>▲▼</button></td>\n      <td>Link</td>\n    </tr>\n    </thead>\n    <tbody>\n    {this.displayResults()}\n    </tbody>\n    </table>\n  <a href='https://www.linkedin.com/in/seanfradl/'><img className='sf' src='sf.png'></img></a>\n  </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}